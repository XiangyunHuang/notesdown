on:
  push:
    branches:
      - devel
      - main
    paths-ignore:
      - 'examples/**'
      - 'Dockerfile'
      - 'dashboard/**'
      - 'code/**'
      - 'data/**'
  pull_request:
    branches:
      - devel

name: Render-Book

env:
  isExtPR: ${{ github.event.pull_request.head.repo.fork == true }}

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      matrix:
        config:
          - {os: ubuntu-22.04, r: '4.2.3'}

    env:
      RETICULATE_PYTHON_ENV: "/opt/.virtualenvs/r-tensorflow"
      LANG: "en_US.UTF-8"
      TZ: "Asia/Shanghai"
      SPARK_VERSION: "3.1.1"
      HADOOP_VERSION: "3.2"
      PANDOC_VERSION: "2.16.2"
      SPARK_HOME: "/opt/spark/spark-3.1.1-bin-hadoop3.2"
      GITHUB_PAT: ${{ secrets.GITHUB_PAT }}
      R_VERSION: ${{ matrix.config.r }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 100
          ref: 'devel'

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
          r-version: ${{ matrix.config.r }}
          extra-repositories: 'https://mc-stan.org/r-packages'

      # based on the renv lockfile file
      # - uses: r-lib/actions/setup-renv@v2
      # based on the DESCRIPTION file
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          needs: book

      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: ${{ env.PANDOC_VERSION }}

      - name: Install ghostscript and Others
        run: |
          sudo apt-get install -y ghostscript cargo ffmpeg graphviz optipng jags virtualenv python3-virtualenv python3-tk libglpk-dev libgit2-dev
          sudo apt-get install -y libpoppler-cpp-dev libmagick++-dev libglu1-mesa-dev libnlopt-dev libudunits2-dev libgdal-dev libproj-dev
          sudo apt-get install -y libnode-dev libgmp-dev libmpfr-dev libmpc-dev tcl-dev tk-dev libxpm-dev libxaw7-dev libgraphviz-dev openjdk-11-jdk

      - name: Install TinyTeX
        uses: r-lib/actions/setup-tinytex@v2
        env:
          # install full prebuilt version
          TINYTEX_INSTALLER: TinyTeX

      - name: Install Spark ENV
        run: |
          mkdir -p /opt/spark/
          curl -fLo spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz https://archive.apache.org/dist/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz
          tar -xzf spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz -C /opt/spark/

      - name: Install Python ENV
        run: |
          virtualenv -p /usr/bin/python3 $RETICULATE_PYTHON_ENV
          source $RETICULATE_PYTHON_ENV/bin/activate
          python -V
          pip install -r requirements.txt
          pip list --format=columns
          deactivate

      - name: Add Write Permission To R library And Install rJava
        run: |
          sudo chown -R $(whoami):root /opt/R/${R_VERSION}/lib/R/library
          sudo R CMD javareconf
          Rscript -e 'install.packages("rJava", type="source")'

      - name: Install LaTeX packages
        run: |
          if(!require('tinytex')) install.packages('tinytex')
          tinytex::tlmgr_install(readLines("texlive.txt"))
        shell: Rscript {0}

      - name: Check R packages
        run: |
          sessionInfo(sort(.packages(T)))
        shell: Rscript {0}

      - name: Install Fonts From System
        run: |
          sudo apt-get install -y fonts-urw-base35 fonts-dejavu fonts-liberation
          sudo apt-get install -y fonts-noto-core fonts-noto-cjk fonts-noto-color-emoji
          fc-list | grep 'dejavu' | sort
          fc-list | grep 'liberation' | sort
          fc-list | grep 'noto' | sort
          fc-list | sort
          mkdir -p ~/.fonts/fira
          curl -fLo Adobe-Fonts.zip https://github.com/XiangyunHuang/fonts/releases/download/v0.1/Adobe-Fonts.zip
          unzip Adobe-Fonts.zip -d ~/.fonts/adobe
          curl -fLo ~/.fonts/xkcd.ttf http://simonsoftware.se/other/xkcd.ttf
          cp -r ~/.TinyTeX/texmf-dist/fonts/opentype/public/fira  ~/.fonts/
          fc-cache -fsv

      - name: Install Fonts From R packages
        run: |
          library(showtext)
          font_install(source_han_serif(), quiet = TRUE)
          font_install(source_han_sans(), quiet = TRUE)
          library(extrafont)
          font_import(pattern="[X/x]kcd.ttf", paths = "~/.fonts/", prompt = FALSE)
        shell: Rscript {0}

      - name: Build Book
        run: |
          make gitbook
          # if make gitbook; then make pdf; fi
        env:
          MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}

      - name: Deploy book to bookdown.org
        if: github.event_name == 'push'
        env:
          CONNECT_API_KEY: ${{ secrets.RSC_BOOKDOWN_TOKEN }}
          CONTENT_ID: 10225 #  # 本地部署一次拿到站点 ID
        run: |
          Rscript '_deploy-book.R'

      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          git-config-name: GitHub Actions
          git-config-email: actions@github.com
          branch: gh-pages
          folder: _book
          clean: true

      - name: Upload book folder for debug
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: Upload Book
          path: _book

      - name: Deploy to Netlify
        if: contains(env.isExtPR, 'false')
        id: netlify-deploy
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './_book'
          production-branch: devel
          github-token: ${{ secrets.GITHUB_PAT }}
          deploy-message:
            'Deploy from GHA: ${{ github.event.pull_request.title || github.event.head_commit.message }} (${{ github.sha }})'
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10
